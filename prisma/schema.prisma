// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  steamId           String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("users_accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("users_sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  balance       Float     @default(0)
  trade_link    String?

  accounts Account[]
  sessions Session[]

  orders   Order[]
  payments Payment[]

  @@map("users")
}

model Order {
  id     Int    @id @default(autoincrement())
  userId String
  sum    Float
  items  Json

  createdAt DateTime   @default(now())
  state     OrderState @default(TRADE)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model Payment {
  id        Int    @id @default(autoincrement())
  serviceId String @unique
  userId    String
  amount    Float

  createdAt DateTime     @default(now())
  state     PaymentState @default(WAITING)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

enum Role {
  USER
  ADMIN
}

enum OrderState {
  TRADE
  COMPLETED
  CANCELED
}

enum PaymentState {
  WAITING
  PAID
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
